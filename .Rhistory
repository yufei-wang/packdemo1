row <- row + 1
}
}
my_df <- data.frame("k" = cv_error[, 1], "mse" = cv_error[, 2])
my_df
#create matrix to store cv error
k_val <- c(2, 5, 10)
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(k_val, 30)
#Iterate through k in c(2, 5, 10):
for(k in k_val) {
#For each value of k, run your function 30 times.
for(i in 1:30) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[i, 2] <- my_rf_cv(k)
}
}
#create matrix to store cv error
k_val <- c(2, 5, 10)
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(k_val, each = 30)
#Iterate through k in c(2, 5, 10):
for(k in k_val) {
#For each value of k, run your function 30 times.
for(i in 1:30) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[i, 2] <- my_rf_cv(k)
}
}
#create matrix to store cv error
k_val <- c(2, 5, 10)
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(k_val, each = 30)
#Iterate through k in c(2, 5, 10):
for(k in k_val) {
#For each value of k, run your function 30 times.
for(i in 1:30) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv(k)
j = j + 1
}
}
#create matrix to store cv error
k_val <- c(2, 5, 10)
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(k_val, each = 30)
j = 1
#Iterate through k in c(2, 5, 10):
for(k in k_val) {
#For each value of k, run your function 30 times.
for(i in 1:30) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv(k)
j = j + 1
}
}
cv.err <- data.frame("k" = cv_err.mat[, 1], "mse" = cv_err.mat[, 2])
ggplot(data = cv.err,
aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot(alpha = 0.4) +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE",
fill = "Number of Folds") +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
my_df %>%
ggplot(aes(x = factor(k), y = mse, fill = factor(k))) +
geom_boxplot() +
labs(title = "MSE for K folds", x = "Number of Folds", y = "MSE",
fill = "Number of Folds") +
theme_classic(base_size = 18) +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "floralwhite"),
legend.title = element_text(hjust = 0.5, size = 15),
legend.margin = margin(6, 6, 6, 6))
cv.err
#create matrix to store cv error
k_val <- c(2, 5, 10)
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(k_val, each = 30)
j = 1
#Iterate through k in c(2, 5, 10):
for(k in k_val) {
#For each value of k, run your function 30 times.
for(i in 1:30) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv(k)
j = j + 1
}
}
cv.err <- data.frame("k" = cv_err.mat[, 1], "mse" = cv_err.mat[, 2])
cv.err
ggplot(data = cv.err,
aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot(alpha = 0.4) +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE",
fill = "Number of Folds") +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
library(randomForest)
library(ggplot2)
library(gapminder)
my_rf_cv1 <- function(k){
n <- nrow(gapminder)
fold <- sample(rep(1:k, length = n))
data <- data.frame(gapminder, "split" = fold)
cv_err_vec <- rep(NA, k)
for (i in 1:k) {
data_train <- data %>% dplyr::filter(split != i)
data_test <- data %>% dplyr::filter(split == i)
model <- randomForest(lifeExp ~ gdpPercap, data = data_train, ntree = 100)
prediction <- predict(model, data_test[, -1])
cv_err_vec[i] = mean((data_test$lifeExp - prediction)^2)
}
cv_err <- mean(cv_err_vec)
return(cv_err)
}
#create matrix to store cv error
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(c(2, 5, 10), 30)
j = 1
#Iterate through k in c(2, 5, 10):
#For each value of k, run your function 30 times.
for(i in 1:30) {
for(k in c(2, 5, 10)) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv1(k) %>% round(5)
j = j +1
}
}
cv.err <- data.frame("k" = cv_err.mat[, 1], "mse" = cv_err.mat[, 2])
cv.err
ggplot(data = cv.err, aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot(fill = "cornflowerblue") +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE") +
theme_bw(base_size = 20)
ggplot(data = cv.err, aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot(fill = factor(k)) +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE") +
theme_bw(base_size = 20)
ggplot(data = cv.err, aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot() +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE") +
theme_bw(base_size = 20)
ggplot(data = cv.err, aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot() +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE",fill = "Number of Folds") +
theme_bw(base_size = 20)
ggplot(data = cv.err, aes(x = as.factor(k), y = mse), fill = as.factor(k)) +
geom_boxplot() +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE", fill = "Number of Folds") +
theme_bw(base_size = 20)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(stat302package)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(stat302package)
devtools::install_github("yufei-wang/stat302package")
#create matrix to store cv error
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(c(2, 5, 10), 30)
j = 1
#For each value of k, run your function 30 times.
for(i in 1:30) {
# Iterate through k in c(2, 5, 10):
for(k in c(2, 5, 10)) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv1(k) %>% round(5)
j = j +1
}
}
library(stat302package)
#create matrix to store cv error
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(c(2, 5, 10), 30)
j = 1
#For each value of k, run your function 30 times.
for(i in 1:30) {
# Iterate through k in c(2, 5, 10):
for(k in c(2, 5, 10)) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv(k) %>%  round(5)
j = j +1
}
}
library(stat302package)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(stat302package)
#create matrix to store cv error
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(c(2, 5, 10), 30)
j = 1
#For each value of k, run your function 30 times.
for(i in 1:30) {
# Iterate through k in c(2, 5, 10):
for(k in c(2, 5, 10)) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv(k) %>%  round(5)
j = j +1
}
}
#create matrix to store cv error
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(c(2, 5, 10), 30)
j = 1
#For each value of k, run your function 30 times.
for(i in 1:30) {
# Iterate through k in c(2, 5, 10):
for(k in c(2, 5, 10)) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv(k) %>%  round(5)
j = j +1
}
}
devtools::install_github("yufei-wang/stat302package")
library(stat302package)
library(stats)
library(magrittr)
library(dplyr)
library(class)
library(randomForest)
library(kableExtra)
library(ggplot2)
data("my_gapminder")
#create matrix to store cv error
cv_err.mat <- matrix(NA, 90, 2)
cv_err.mat[, 1] <- rep(c(2, 5, 10), 30)
j = 1
#For each value of k, run your function 30 times.
for(i in 1:30) {
# Iterate through k in c(2, 5, 10):
for(k in c(2, 5, 10)) {
#For each of the 30 iterations, store the CV estimated MSE.
cv_err.mat[j, 2] <- my_rf_cv(k) %>%  round(5)
j = j +1
}
}
cv.err <- data.frame("k" = cv_err.mat[, 1], "mse" = cv_err.mat[, 2])
ggplot(data = cv.err, aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot(fill = "cornflowerblue") +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE") +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
table.df <- data.frame(mean = mean(mse), sd = sd(mse))
table.df <- data.frame(mean = mean(cv.err$mse), sd = sd(cv.err$mse))
table.df <- data.frame(mean = mean(cv.err$mse), sd = sd(cv.err$mse))
table.df
table.df <- data.frame(mean = summary(cv.err$mse), sd = summary(cv.err$mse))
table.df <- data.frame(summary(cv.err$mse), summary(cv.err$mse))
table.df <- cv.err %>% group_by(k)
table.df
table.df <- cv.err %>% summarise(mean = mean(mse), sd = sd(mse))
table.df
table.df <- cv.err %>% group_by(k) %>% summarise(mean = mean(mse), sd = sd(mse))
table.df
table.df <- cv.err %>% group_by(k) %>% summary(mean = mean(mse), sd = sd(mse))
table.df
table.df <- cv.err %>% group_by(k) %>% summarise(mean = mean(mse), sd = sd(mse))
table.df
table.df <- cv.err %>% group_by(k) %>% summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(table.df))
table.df <- cv.err %>% group_by(k) %>% summarise("mean" = mean(mse), "sd" = sd(mse))
kable_styling(kable(table.df))
table.df <- cv.err %>% group_by(k) %>% summarise("mean" = mean(cv.err$mse), "sd" = sd(mse))
kable_styling(kable(table.df))
table.df <- cv.err %>% group_by(k) %>% summarise("mean" = mean(mse), "sd" = sd(mse))
kable_styling(kable(table.df))
knitr::opts_chunk$set(echo = TRUE)
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
my_df %>%
ggplot(aes(x = factor(k), y = mse, fill = factor(k))) +
geom_boxplot() +
labs(title = "MSE for K folds", x = "Number of Folds", y = "MSE",
fill = "Number of Folds") +
theme_classic(base_size = 18) +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "floralwhite"),
legend.title = element_text(hjust = 0.5, size = 15),
legend.margin = margin(6, 6, 6, 6))
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
my_df <- data.frame("k" = cv_error[, 1], "mse" = cv_error[, 2])
ggplot(data = cv.err, aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot(fill = "cornflowerblue") +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE") +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
table.df <- cv.err %>% group_by(k) %>% summarise("mean" = mean(mse), "sd" = sd(mse))
kable_styling(kable(table.df))
ggplot(data = cv.err, aes(x = factor(k), y = mse), fill = factor(k)) +
geom_boxplot(fill = "cornflowerblue") +
labs(title = "Boxplots of MSE by k folds", x = "Number of Folds", y = "MSE") +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
table.df <- cv.err %>% group_by(k) %>% summarise("mean" = mean(mse), "sd" = sd(mse))
table.df %>%
kable("html") %>%
kable_styling()
table.df <- cv.err %>% group_by(k) %>% summarise("mean" = mean(mse), "sd" = sd(mse))
table.df %>%
kable("html") %>%
kable_styling()
tutor_model <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
tutor_model$coefficient
tutor_model <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
tutor_model
tutor_model <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
tutor_model
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
my_lm <- function(formula, data){
X <- model.matrix(formula, data)
my_model <- model.frame(formula, data)
Y <- model.response(my_model)
df <- nrow(data) - ncol(X)
#Calculate intercept
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
# calculates variance
sigma_2 <- sum((Y - X %*% beta)^2/df)
#Calculate standard error
se <- diag(sqrt(sigma_2 * solve(t(X) %*% X)))
#Calculate t value and p value
t <- (beta - 0)/se
p_val <- 2*pt(abs(t), df, lower.tail = FALSE)
# make table
result <- cbind(beta, se, t, p_val)
colnames(result) <- c("Estimate", "Std.Error", "t.value", "Pr(>|t|)")
result <-as.table(result)
return(result)
}
my_model <- my_lm(lifeExp ~ gdpPercap + continent, data = gapminder)
my_model
library(gapminder)
# my_lm <- function(formula, data){
#   X <- model.matrix(formula, data)
#   my_model <- model.frame(formula, data)
#   Y <- model.response(my_model)
#   df <- nrow(data) - ncol(X)
#   #Calculate intercept
#   beta <- solve(t(X) %*% X) %*% t(X) %*% Y
#     # calculates variance
#   sigma_2 <- sum((Y - X %*% beta)^2/df)
#   #Calculate standard error
#   se <- diag(sqrt(sigma_2 * solve(t(X) %*% X)))
#   #Calculate t value and p value
#   t <- (beta - 0)/se
#   p_val <- 2*pt(abs(t), df, lower.tail = FALSE)
#   # make table
#   result <- cbind(beta, se, t, p_val)
#   colnames(result) <- c("Estimate", "Std.Error", "t.value", "Pr(>|t|)")
#   result <-as.table(result)
#   return(result)
# }
my_lm <- function(formula, data) {
# extract all the objects in the formula
model <- model.frame(formula = formula, data = data)
# extract all independent variable
x <- model.matrix(object = formula, data = data)
# extract all dependent variable
y <- as.matrix(model.response(model))
# get the coefficient
coef <- solve(t(x) %*% x) %*% t(x) %*% y
# get the degree of freedom
# df = n - # of parameter - 1
# # of parameter  = ncol(x) + 1
df <- nrow(x) - ncol(x)
# get the variance
var <- sum((y - x %*% coef)^2 / df)
# get the standard error of each variable
se <- sqrt(var * solve(t(x) %*% x)) %>%
diag() %>%
as.matrix()
# get the t-value
t_value <- ((coef - 0) / se) %>% round(5)
# get Pr(>|t|)
pr <- pt(abs(t_value), df, lower.tail = FALSE) * 2
# round coef, se, t_value to 5 decimals to display
coef <- round(coef, 5)
se <- round(se, 5)
t_value <- round(t_value, 5)
# combine all the information to one single matrix
result <- cbind(coef, se, t_value, pr)
colnames(result) <- c("Estimate", "Std.Error", "t.value", "Pr(>|t|)")
# convert the result to a data frame in order to display as a table
result <- data.frame(result)
return(result)
}
my_model <- my_lm(lifeExp ~ gdpPercap + continent, data = gapminder)
my_model
tutor_model <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
tutor_model
tutor_model <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
tutor_model
tutor_model <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
tutor_model
library(stat302package)
library(stats)
library(magrittr)
library(dplyr)
library(class)
library(randomForest)
library(htm)
library(kableExtra)
coef <- tutor_model[, 1]
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my_df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(my.df, aes(x = Actual, y = Fitted, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
theme_light()
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(data = my.df, aes(x = Fitted, y = Actual, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Actual vs. Fitted Values", x = "Fitted Values", y = "Actual Values",
color = "Continent") +
theme_bw(base_size = 20)
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(data = my.df, aes(x = Fitted, y = Actual, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Actual vs. Fitted Values", x = "Fitted Values", y = "Actual Values",
color = "Continent") +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(data = my.df, aes(x = Fitted, y = Actual, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
labs( x = "Fitted Values", y = "Actual Values",title = "Actual vs. Fitted Values"
color = "Continent") +
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(data = my.df, aes(x = Fitted, y = Actual, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
labs( x = "Fitted Values", y = "Actual Values", title = "Actual vs. Fitted Values"
color = "Continent") +
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(data = my.df, aes(x = Fitted, y = Actual, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
labs(x = "Fitted Values", y = "Actual Values", title = "Actual vs. Fitted Values"
color = "Continent") +
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(data = my.df, aes(x = Fitted, y = Actual, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
labs( title = "Actual vs. Fitted Values", x = "Fitted Values", y = "Actual Values"
color = "Continent") +
coef <- tutor_model[, 1]
x_hat <- model.matrix(lifeExp ~ gdpPercap + continent, data = my_gapminder)
y_hat <- x_hat %*% as.matrix(coef)
my.df <- data.frame("Fitted" = y_hat,
"Actual" = my_gapminder$lifeExp,
"Continent" = my_gapminder$continent)
ggplot(data = my.df, aes(x = Fitted, y = Actual, color = Continent)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
labs(x = "Fitted Values", y = "Actual Values", title = "Actual vs. Fitted Values",
color = "Continent") +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
